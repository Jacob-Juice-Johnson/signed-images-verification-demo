name: Build, Push, and Sign Artifacts for Demo (Docker/Helm)

on:
  workflow_dispatch: # Allow manual triggering

env:
  REGISTRY: ratifyacrdemo009.azurecr.io  # Updated to match Terraform ACR name
  CERT_NAME: ratify  # Updated to match Terraform certificate name
  AKV_NAME: ratifykvdemo009  # Updated to match Terraform Key Vault name

jobs:
  build-and-push-docker-images:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image_type:
          - name: demo-signed-image
            sign: true
          - name: demo-unsigned-image
            sign: false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure CLI
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry
      run: |
        az acr login --name $(echo $REGISTRY | cut -d'.' -f1)

    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v6
      with:
        context: ./src
        file: ./src/docker/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ matrix.image_type.name }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ matrix.image_type.name }}:latest

    - name: Retrieve digest
      run: |
        echo "target_artifact_reference=${{ env.REGISTRY }}/${{ matrix.image_type.name }}@${{ steps.push.outputs.digest }}" >> "$GITHUB_ENV"

    # Install Notation CLI with the default version "1.1.0"
    - name: setup notation
      if: matrix.image_type.sign
      uses: notaryproject/notation-action/setup@v1
    
    # Get Key ID dynamically from Azure Key Vault
    - name: Get Key ID from Azure Key Vault
      if: matrix.image_type.sign
      run: |
        KEY_ID=$(az keyvault certificate show -n ${{ env.CERT_NAME }} --vault-name ${{ env.AKV_NAME }} --query 'kid' -o tsv)
        echo "KEY_ID=$KEY_ID" >> "$GITHUB_ENV"
        echo "Retrieved Key ID: $KEY_ID"
    
    # Sign your OCI artifact using private key stored in AKV
    - name: sign OCI artifact using key pair from AKV
      if: matrix.image_type.sign
      uses: notaryproject/notation-action/sign@v1
      with:
        plugin_name: azure-kv
        plugin_url: https://github.com/Azure/notation-azure-kv/releases/download/v1.0.1/notation-azure-kv_1.0.1_linux_amd64.tar.gz
        plugin_checksum: f8a75d9234db90069d9eb5660e5374820edf36d710bd063f4ef81e7063d3810b
        key_id: ${{ env.KEY_ID }}
        target_artifact_reference: ${{ env.target_artifact_reference }}
        signature_format: cose
        plugin_config: |-
          self_signed=true
        force_referrers_tag: 'true'

  build-and-push-helm-charts:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        chart_type:
          - name: demo-app-signed
            sign: true
          - name: demo-app-unsigned
            sign: false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.14.0'

    - name: Log in to Azure CLI
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry
      run: |
        az acr login --name $(echo $REGISTRY | cut -d'.' -f1)

    - name: Package Helm Chart
      run: |
        mkdir -p ./charts
        helm package src/helm \
          --app-version ${{ github.sha }} \
          --destination ./charts

    - name: Push Helm Chart to ACR OCI Registry
      run: |
        helm push ./charts/demo-app-1.0.0.tgz oci://${{ env.REGISTRY }}/helm/${{ matrix.chart_type.name }}
        DIGEST=$(az acr manifest list-metadata --registry $(echo $REGISTRY | cut -d'.' -f1) --name helm/${{ matrix.chart_type.name }}/demo-app --query "[?tags[0]=='1.0.0'].digest" -o tsv)
        echo "HELM_DIGEST=$DIGEST" >> "$GITHUB_ENV"

    - name: Retrieve digest
      run: |
        echo "target_artifact_reference=${{ env.REGISTRY }}/helm/${{ matrix.chart_type.name }}/demo-app@${{ env.HELM_DIGEST }}" >> "$GITHUB_ENV"

    # Install Notation CLI with the default version "1.1.0"
    - name: setup notation
      if: matrix.chart_type.sign
      uses: notaryproject/notation-action/setup@v1
    
    # Get Key ID dynamically from Azure Key Vault
    - name: Get Key ID from Azure Key Vault
      if: matrix.chart_type.sign
      run: |
        KEY_ID=$(az keyvault certificate show -n ${{ env.CERT_NAME }} --vault-name ${{ env.AKV_NAME }} --query 'kid' -o tsv)
        echo "KEY_ID=$KEY_ID" >> "$GITHUB_ENV"
        echo "Retrieved Key ID: $KEY_ID"
    
    # Sign your OCI artifact using private key stored in AKV
    - name: sign OCI artifact using key pair from AKV
      if: matrix.chart_type.sign
      uses: notaryproject/notation-action/sign@v1
      with:
        plugin_name: azure-kv
        plugin_url: https://github.com/Azure/notation-azure-kv/releases/download/v1.0.1/notation-azure-kv_1.0.1_linux_amd64.tar.gz
        plugin_checksum: f8a75d9234db90069d9eb5660e5374820edf36d710bd063f4ef81e7063d3810b
        key_id: ${{ env.KEY_ID }}
        target_artifact_reference: ${{ env.target_artifact_reference }}
        signature_format: cose
        plugin_config: |-
          self_signed=true
        force_referrers_tag: 'true'

  deploy-app:
    name: ${{ matrix.app_type.name }} Deploy Application to AKS
    runs-on: ubuntu-latest
    environment: approve-me
    needs: 
      - build-and-push-docker-images
      - build-and-push-helm-charts
    strategy:
      fail-fast: false
      matrix:
        app_type:
          - name: demo-all-signed
            image_name: "ratifyacrdemo009.azurecr.io/demo-signed-image:latest"
            helm_chart: "demo-app-signed"
          - name: demo-helm-unsigned
            image_name: "ratifyacrdemo009.azurecr.io/demo-signed-image:latest"
            helm_chart: "demo-app-unsigned"
          - name: demo-docker-unsigned
            image_name: "ratifyacrdemo009.azurecr.io/demo-unsigned-image:latest"
            helm_chart: "demo-app-signed"
          - name: demo-all-unsigned
            image_name: "ratifyacrdemo009.azurecr.io/demo-unsigned-image:latest"
            helm_chart: "demo-app-unsigned"
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.14.0'

    - name: Log in to Azure CLI
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Log in to Azure Container Registry
      run: |
        az acr login --name $(echo $REGISTRY | cut -d'.' -f1)

    # Install Notation CLI with the default version "1.1.0"
    - name: setup notation
      uses: notaryproject/notation-action/setup@v1
    
    # Get Key ID dynamically from Azure Key Vault
    - name: Get Key ID from Azure Key Vault
      run: |
        KEY_ID=$(az keyvault certificate show -n ${{ env.CERT_NAME }} --vault-name ${{ env.AKV_NAME }} --query 'kid' -o tsv)
        echo "KEY_ID=$KEY_ID" >> "$GITHUB_ENV"
        echo "Retrieved Key ID: $KEY_ID"

    # Configure notation with the self-signed certificate
    # Verify the signed Helm chart in ACR
    - name: Notation Verify Helm Charts
      run: |
        # Download the certificate from Key Vault
        az keyvault certificate download --vault-name ${{ env.AKV_NAME }} --name ${{ env.CERT_NAME }} --file cert.pem --encoding PEM
        # Add the certificate to notation trust store using correct format
        notation cert add --type ca --store ca-certs cert.pem
        # Verify the certificate was added
        notation cert list --store ca
        # Import the trust policy
        notation policy import ./trustpolicy/demo-trustpolicy.json
        # Show trust policy
        notation policy show
        # Verify the Helm chart in ACR (only for signed charts)
        notation verify ${{ env.REGISTRY }}/helm/${{ matrix.app_type.helm_chart }}/demo-app@${{ env.HELM_DIGEST }}

    - name: Setup kubectl
      uses: azure/setup-kubectl@v4

    - name: Get AKS credentials
      run: |
        az aks get-credentials --resource-group ratifyrgdemo009 --name ratifyaksdemo009

    - name: Deploy application with Helm
      run: |
        helm upgrade --install ${{ matrix.app_type.name }} oci://${{ env.REGISTRY }}/helm/${{ matrix.app_type.helm_chart }}/demo-app \
          --version 1.0.0 \
          --set image.name=${{ matrix.app_type.image_name }} \
          --namespace demo \
          --create-namespace
    